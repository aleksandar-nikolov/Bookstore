@page "/books/edit/{id}"
@using System.IO
@using WA.Contracts
@using WA.Models
@using WA.Static
@*@attribute [Authorize(Roles = "Administrator")]*@
@attribute [Authorize(Roles = "Administrator, Customer")]

@inject IBookRepository _repo
@inject IAuthorRepository _authorRepo
@inject NavigationManager _navMan
@inject IFileUpload _fileUpload

<h3 class="card-title">Edit Book</h3>
<hr />
@if (!isSuccess)
{
    <ErrorMessage Message="Something went wrong" />
}
@if (_isFailed)
{
    <div class="alert alert-danger">
        <p>Something went wrong</p>
    </div>
}

@if (Model == null)
{
    <LoadingMessage Message="Loading" />
}
else
{
    <EditForm Model="@Model" OnValidSubmit="EditBook">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Title</label>
            <InputText @bind-Value="Model.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
        </div>
        <div class="form-group">
            <label for="author">Authors</label>
            <select @bind="Model.AuthorId" class="form-control" id="author">
                <option value="-- select author --"></option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="summary">Summary:</label>
            <InputTextArea @bind-Value="Model.Summary" class="form-control" id="summary" />
        </div>
        <div class="form-group">
            <label for="year">Year:</label>
            <InputNumber @bind-Value="Model.Year" class="form-control" id="year" />
        </div>
        <div class="form-group">
            <label for="bookcover">Book Cover Photo</label>
            @*<InputFile OnChange="HandleFileSelection" multiple></InputFile>*@
            <InputFile OnChange="HandleFileSelection"></InputFile>
            @if (_isInvalidFileType)
            {
                <ErrorMessage Message="Not supported image" />
            }
            @if (!string.IsNullOrWhiteSpace(_imageDataUrl))
            {
                <img src="@_imageDataUrl" style="height: 100px;width: 100px" />
            }
            else if (string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="uploads/@Model.Image" style="height: 100px;width: 100px" />
            }
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>
        <button class="btn btn-secondary" @onclick="BackToList">
            <span class="oi oi-media-skip-backward">Back to list</span>
        </button>
    </EditForm>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private Book Model = new Book();

    private IList<Author> Authors;

    private IBrowserFile _file;

    private string _imageDataUrl;

    private bool isSuccess = true;

    private bool _isFailed = false;

    private bool _isInvalidFileType = false;

    private bool _isFileChanged = false;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.BooksEndpoint, id);
        Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
    }

    private void BackToList()
    {
        _navMan.NavigateTo("/books/");
    }

    private async Task EditBook()
    {
        if (_isInvalidFileType)
        {
            return;
        }

        if (_file != null)
        {

            var ext = Path.GetExtension(_file.Name);
            var picId = Guid.NewGuid().ToString().Replace("-", string.Empty);
            var picName = $"{picId}{ext}";

            _fileUpload.RemoveFile(Model.Image);

            Model.Image = picName;
            await _fileUpload.UploadFile(_file.OpenReadStream(), picName);
        }
        else if (_isFileChanged)
        {
            _fileUpload.RemoveFile(Model.Image);
            Model.Image = string.Empty;
        }

        bool isSuccess = await _repo.Update(Endpoints.BooksEndpoint, Model, Convert.ToInt32(Id));
        if (!isSuccess)
        {
            _isFailed = true;
        }
        else
        {
            _navMan.NavigateTo("/books/");
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        _isFileChanged = true;

        //file = e.GetMultipleFiles(7);
        _file = e.File;
        if (_file != null)
        {
            var name = _file.Name;
            if (Path.GetExtension(name).ToLower() == "jpg" ||
                Path.GetExtension(name).ToLower() == "jpeg" ||
                Path.GetExtension(name).ToLower() == "png")
            {
                try
                {
                    var resizedImageFile = await _file.RequestImageFileAsync("image/png", 100, 100);

                    var buffer = new byte[resizedImageFile.Size];
                    await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                    string base64ImageRepresentation = Convert.ToBase64String(buffer);
                    _imageDataUrl = $"data:image/png;base64,{base64ImageRepresentation}";

                    _isInvalidFileType = false;

                    _fileUpload.RemoveFile(Model.Image);
                }
                catch
                {
                    _isInvalidFileType = true;
                    _imageDataUrl = string.Empty;
                }
            }
            else
            {
                _isInvalidFileType = true;
                _imageDataUrl = string.Empty;
            }
        }
    }
}

