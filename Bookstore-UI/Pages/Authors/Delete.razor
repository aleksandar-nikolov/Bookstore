@page "/authors/delete/{id}"
@using Bookstore_UI.Static
@inject IAuthorRepository _repo
@inject NavigationManager _navMan


<h3>Are you sure you want to delete this author?</h3>

@if (_isFailed)
{
    <ErrorMessage Message="Could not delete"></ErrorMessage>
}

@if (Model == null)
{
    <LoadingMessage Message="Loading" />
}
else
{
    <div class="col-md-5">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>First Name</td>
                <td>@Model.Firstname</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@Model.Lastname</td>
            </tr>
            <tr>
                <td>Biography</td>
                <td>@Model.Bio</td>
            </tr>
        </table>
        <br />
        @if (Model.Books == null || !Model.Books.Any())
        {
            <div class="alert alert-dismissible alert-secondary">
                No books for this author
            </div>
        }
        else
        {
            <div class="card" style="width: 18rem">
                <div class="card-header">
                    <h4>Author's Books</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var book in Model.Books)
                    {
                        <li class="list-group-item">@book.Title - @book.Price</li>
                    }
                </ul>
            </div>
        }
    </div>
}
<br />
<button class="btn btn-secondary" @onclick="BackToList">
    <span class="oi oi-media-skip-backward">Back to list</span>
</button>
<button class="btn btn-secondary btn-danger" @onclick="DeleteAuthor">
    <span class="oi oi-pencil">Delete</span>
</button>


@code {

    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    private bool _isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private void BackToList()
    {
        _navMan.NavigateTo("/authors/");
    }

    private async Task DeleteAuthor()
    {
        bool isSuccess = await _repo.Delete($"{Endpoints.AuthorsEndpoint}", Model.Id);
        if (!isSuccess)
        {
            _isFailed = true;
        }
        else
        {
            _navMan.NavigateTo("/authors/");
        }
    }
}
