@page "/authors/edit/{id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _repo
@inject NavigationManager _navMan

<h3 class="card-title">Edit Author</h3>
@if (_isFailed)
{
    <div class="alert alert-danger">
        <p>Something went wrong</p>
    </div>
}

@if (Model == null)
{
    <LoadingMessage Message="Loading" />
}
else
{
    <EditForm Model="@Model" OnValidSubmit="EditAuthor">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="Model.Firstname" class="form-control" id="firstname" />
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText @bind-Value="Model.Lastname" class="form-control" id="lastname" />
        </div>
        <div class="form-group">
            <label for="Bio">Biography</label>
            <InputText @bind-Value="Model.Bio" class="form-control" id="bio" />
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>
        <button class="btn btn-secondary" @onclick="BackToList">
            <span class="oi oi-media-skip-backward">Back to list</span>
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    private bool _isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private void BackToList()
    {
        _navMan.NavigateTo("/authors/");
    }

    private async Task EditAuthor()
    {
        bool isSuccess = await _repo.Update($"{Endpoints.AuthorsEndpoint}", Model, Model.Id);
        if (!isSuccess)
        {
            _isFailed = true;
        }
        else
        {
            _navMan.NavigateTo("/authors/");
        }
    }
}